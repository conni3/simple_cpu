$date
	Fri Aug  8 11:40:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module decoder_tb $end
$var wire 1 ! regWrite $end
$var wire 1 " Store $end
$var wire 1 # Load $end
$var wire 1 $ LUI $end
$var wire 1 % JALR $end
$var wire 1 & JAL $end
$var wire 1 ' Branch $end
$var wire 1 ( AUIPC $end
$var wire 1 ) ALUreg $end
$var wire 1 * ALUimm $end
$var reg 32 + instr [31:0] $end
$var integer 32 , failed [31:0] $end
$var integer 32 - passed [31:0] $end
$scope module uut $end
$var wire 1 % JALR $end
$var wire 32 . instr [31:0] $end
$var wire 1 ! regWrite $end
$var wire 7 / opcode [6:0] $end
$var wire 1 " Store $end
$var wire 1 0 SYSTEM $end
$var wire 1 # Load $end
$var wire 1 $ LUI $end
$var wire 1 & JAL $end
$var wire 1 ' Branch $end
$var wire 1 ( AUIPC $end
$var wire 1 ) ALUreg $end
$var wire 1 * ALUimm $end
$var parameter 32 1 DATA_WIDTH $end
$upscope $end
$scope task check_output $end
$var reg 1 2 exp_ALUimm $end
$var reg 1 3 exp_ALUreg $end
$var reg 1 4 exp_AUIPC $end
$var reg 1 5 exp_Branch $end
$var reg 1 6 exp_JAL $end
$var reg 1 7 exp_JALR $end
$var reg 1 8 exp_LUI $end
$var reg 1 9 exp_Load $end
$var reg 1 : exp_Store $end
$var reg 1 ; exp_regWrite $end
$var reg 32 < instr_val [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 1
$end
#0
$dumpvars
b1000001000000110110011 <
1;
0:
09
08
07
06
05
04
13
02
00
b110011 /
b1000001000000110110011 .
b0 -
b0 ,
b1000001000000110110011 +
0*
1)
0(
0'
0&
0%
0$
0#
0"
1!
$end
#1000
0)
1*
b10011 /
b10100001000000110010011 +
b10100001000000110010011 .
12
03
b10100001000000110010011 <
b1 -
#2000
0*
1#
b11 /
b10000001010000110000011 +
b10000001010000110000011 .
19
02
b10000001010000110000011 <
b10 -
#3000
0!
0#
1"
b100011 /
b1100001010001000100011 +
b1100001010001000100011 .
0;
1:
09
b1100001010001000100011 <
b11 -
#4000
1'
0"
b1100011 /
b1100001000000101100011 +
b1100001000000101100011 .
0:
15
b1100001000000101100011 <
b100 -
#5000
1!
1%
0'
b1100111 /
b10000001000000111100111 +
b10000001000000111100111 .
1;
17
05
b10000001000000111100111 <
b101 -
#6000
0%
1&
b1101111 /
b111101111 +
b111101111 .
07
16
b111101111 <
b110 -
#7000
1!
0&
1$
b110111 /
b1000110110111 +
b1000110110111 .
18
06
b1000110110111 <
b111 -
#8000
1(
0$
b10111 /
b1000110010111 +
b1000110010111 .
14
08
b1000110010111 <
b1000 -
#9000
b1001 -
