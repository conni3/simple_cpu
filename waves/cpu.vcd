$date
	Wed Aug 27 00:55:19 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 32 ! debug_pc [31:0] $end
$var parameter 32 " ADDR_WIDTH $end
$var parameter 32 # END_SENTINEL $end
$var parameter 128 $ IMEM_FILE $end
$var parameter 32 % MAX_CYCLES $end
$var reg 1 & clk $end
$var reg 1 ' finished $end
$var reg 1 ( mem_ok $end
$var reg 1 ) reg_ok $end
$var reg 1 * reset $end
$var real 1 + cpi $end
$var integer 32 , cycles [31:0] $end
$var integer 32 - instr_count [31:0] $end
$var integer 32 . k [31:0] $end
$scope module dut $end
$var wire 1 & clk $end
$var wire 32 / debug_alu [31:0] $end
$var wire 32 0 debug_instr [31:0] $end
$var wire 1 * reset $end
$var wire 2 1 wb_sel [1:0] $end
$var wire 5 2 rs2 [4:0] $end
$var wire 5 3 rs1 [4:0] $end
$var wire 1 4 reg_write $end
$var wire 5 5 rd [4:0] $end
$var wire 7 6 opcode [6:0] $end
$var wire 2 7 op1_sel [1:0] $end
$var wire 1 8 mem_write $end
$var wire 1 9 mem_read $end
$var wire 1 : is_jalr $end
$var wire 1 ; is_jal $end
$var wire 1 < is_branch $end
$var wire 32 = instr [31:0] $end
$var wire 32 > imm_out [31:0] $end
$var wire 7 ? funct7 [6:0] $end
$var wire 3 @ funct3 [2:0] $end
$var wire 32 A debug_pc [31:0] $end
$var wire 32 B debug_alu_int [31:0] $end
$var wire 20 C csr [19:0] $end
$var wire 1 D alu_src $end
$var wire 4 E alu_ctrl [3:0] $end
$var parameter 32 F ADDR_WIDTH $end
$var parameter 32 G DATA_WIDTH $end
$var parameter 128 H DMEM_FILE $end
$var parameter 128 I IMEM_FILE $end
$scope module u_controller $end
$var wire 2 J wb_sel [1:0] $end
$var wire 5 K rs2 [4:0] $end
$var wire 5 L rs1 [4:0] $end
$var wire 1 4 reg_write $end
$var wire 5 M rd [4:0] $end
$var wire 7 N opcode [6:0] $end
$var wire 2 O op1_sel [1:0] $end
$var wire 1 8 mem_write $end
$var wire 1 9 mem_read $end
$var wire 1 : is_jalr $end
$var wire 1 ; is_jal $end
$var wire 1 < is_branch $end
$var wire 32 P instr [31:0] $end
$var wire 3 Q imm_sel [2:0] $end
$var wire 32 R imm_out [31:0] $end
$var wire 1 S funct7_5 $end
$var wire 7 T funct7 [6:0] $end
$var wire 3 U funct3 [2:0] $end
$var wire 20 V csr [19:0] $end
$var wire 1 D alu_src $end
$var wire 2 W alu_op [1:0] $end
$var wire 4 X alu_ctrl [3:0] $end
$scope module u_alu_control $end
$var wire 3 Y funct3 [2:0] $end
$var wire 1 S funct7_5 $end
$var wire 2 Z alu_op [1:0] $end
$var reg 4 [ alu_ctrl [3:0] $end
$upscope $end
$scope module u_decoder_glue $end
$var wire 2 \ wb_sel [1:0] $end
$var wire 5 ] rs2 [4:0] $end
$var wire 5 ^ rs1 [4:0] $end
$var wire 1 4 reg_write $end
$var wire 5 _ rd [4:0] $end
$var wire 2 ` op1_sel [1:0] $end
$var wire 1 8 mem_write $end
$var wire 1 9 mem_read $end
$var wire 1 a jump $end
$var wire 1 b is_system $end
$var wire 1 c is_store $end
$var wire 1 d is_lui $end
$var wire 1 e is_load $end
$var wire 1 : is_jalr $end
$var wire 1 ; is_jal $end
$var wire 1 < is_branch $end
$var wire 1 f is_auipc $end
$var wire 1 g is_alu_reg $end
$var wire 1 h is_alu_imm $end
$var wire 32 i instr [31:0] $end
$var wire 3 j imm_sel [2:0] $end
$var wire 32 k imm_out [31:0] $end
$var wire 1 l branch_sig $end
$var wire 1 D alu_src $end
$var wire 2 m alu_op [1:0] $end
$var parameter 32 n DATA_WIDTH $end
$scope module u_ctl $end
$var wire 1 b is_system $end
$var wire 1 c is_store $end
$var wire 1 d is_lui $end
$var wire 1 e is_load $end
$var wire 1 : is_jalr $end
$var wire 1 ; is_jal $end
$var wire 1 < is_branch $end
$var wire 1 f is_auipc $end
$var wire 1 g is_alu_reg $end
$var wire 1 h is_alu_imm $end
$var wire 32 o instr [31:0] $end
$var wire 3 p funct3 [2:0] $end
$var parameter 32 q DATA_WIDTH $end
$var reg 2 r alu_op [1:0] $end
$var reg 1 D alu_src $end
$var reg 1 l branch_sig $end
$var reg 3 s imm_sel [2:0] $end
$var reg 1 a jump $end
$var reg 1 9 mem_read $end
$var reg 1 8 mem_write $end
$var reg 2 t op1_sel [1:0] $end
$var reg 2 u wb_sel [1:0] $end
$upscope $end
$scope module u_dec $end
$var wire 1 : is_jalr $end
$var wire 1 4 reg_write $end
$var wire 7 v opcode [6:0] $end
$var wire 1 b is_system $end
$var wire 1 c is_store $end
$var wire 1 d is_lui $end
$var wire 1 e is_load $end
$var wire 1 ; is_jal $end
$var wire 1 < is_branch $end
$var wire 1 f is_auipc $end
$var wire 1 g is_alu_reg $end
$var wire 1 h is_alu_imm $end
$var wire 32 w instr [31:0] $end
$var parameter 32 x DATA_WIDTH $end
$upscope $end
$scope module u_imm $end
$var wire 3 y imm_sel [2:0] $end
$var wire 32 z u_imm [31:0] $end
$var wire 32 { s_imm [31:0] $end
$var wire 32 | j_imm [31:0] $end
$var wire 32 } instr [31:0] $end
$var wire 32 ~ i_imm [31:0] $end
$var wire 32 !" b_imm [31:0] $end
$var reg 32 "" imm_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module u_datapath $end
$var wire 4 #" alu_ctrl [3:0] $end
$var wire 1 D alu_src $end
$var wire 1 & clk $end
$var wire 20 $" csr [19:0] $end
$var wire 32 %" debug_alu [31:0] $end
$var wire 32 &" debug_pc [31:0] $end
$var wire 3 '" funct3 [2:0] $end
$var wire 7 (" funct7 [6:0] $end
$var wire 32 )" imm_out [31:0] $end
$var wire 1 < is_branch $end
$var wire 1 ; is_jal $end
$var wire 1 : is_jalr $end
$var wire 1 9 mem_read $end
$var wire 1 8 mem_write $end
$var wire 2 *" op1_sel [1:0] $end
$var wire 7 +" opcode [6:0] $end
$var wire 5 ," rd [4:0] $end
$var wire 1 4 reg_write $end
$var wire 1 * reset $end
$var wire 5 -" rs1 [4:0] $end
$var wire 5 ." rs2 [4:0] $end
$var wire 2 /" wb_sel [1:0] $end
$var wire 32 0" wb_data [31:0] $end
$var wire 32 1" rs2_data [31:0] $end
$var wire 32 2" rs1_data [31:0] $end
$var wire 32 3" rdata [31:0] $end
$var wire 32 4" pc_plus4 [31:0] $end
$var wire 32 5" pc_next [31:0] $end
$var wire 32 6" pc_current [31:0] $end
$var wire 32 7" op_b [31:0] $end
$var wire 32 8" op_a [31:0] $end
$var wire 32 9" instr [31:0] $end
$var wire 11 :" imem_addr [10:0] $end
$var wire 11 ;" dmem_addr [10:0] $end
$var wire 1 <" branch_taken $end
$var wire 1 =" alu_zero $end
$var wire 32 >" alu_result [31:0] $end
$var parameter 32 ?" ADDR_WIDTH $end
$var parameter 32 @" DATA_WIDTH $end
$var parameter 128 A" DMEM_FILE $end
$var parameter 128 B" IMEM_FILE $end
$scope module u_alu $end
$var wire 4 C" alu_ctrl [3:0] $end
$var wire 32 D" op_a [31:0] $end
$var wire 32 E" op_b [31:0] $end
$var wire 1 =" alu_zero $end
$var reg 32 F" alu_result [31:0] $end
$upscope $end
$scope module u_branch_comp $end
$var wire 3 G" funct3 [2:0] $end
$var wire 32 H" op2 [31:0] $end
$var wire 32 I" op1 [31:0] $end
$var parameter 3 J" BEQ $end
$var parameter 3 K" BGE $end
$var parameter 3 L" BGEU $end
$var parameter 3 M" BLT $end
$var parameter 3 N" BLTU $end
$var parameter 3 O" BNE $end
$var reg 1 <" branch_taken $end
$upscope $end
$scope module u_dmem $end
$var wire 11 P" addr [10:0] $end
$var wire 1 & clk $end
$var wire 1 9 mem_read $end
$var wire 1 8 mem_write $end
$var wire 32 Q" wdata [31:0] $end
$var parameter 32 R" ADDR_WIDTH $end
$var parameter 128 S" MEM_FILE $end
$var reg 32 T" rdata [31:0] $end
$upscope $end
$scope module u_imem $end
$var wire 11 U" addr [10:0] $end
$var parameter 32 V" ADDR_WIDTH $end
$var parameter 128 W" MEM_FILE $end
$var reg 32 X" instr [31:0] $end
$upscope $end
$scope module u_next_pc $end
$var wire 1 <" branch_taken $end
$var wire 32 Y" imm_out [31:0] $end
$var wire 1 < is_branch $end
$var wire 1 ; is_jal $end
$var wire 1 : is_jalr $end
$var wire 1 Z" misalign_bits $end
$var wire 32 [" rs1_data [31:0] $end
$var wire 32 \" pc_plus4 [31:0] $end
$var wire 32 ]" pc_next [31:0] $end
$var wire 32 ^" pc_current [31:0] $end
$var wire 32 _" jalr_raw [31:0] $end
$var wire 32 `" jalr_aligned [31:0] $end
$var wire 32 a" branch_jal_pc [31:0] $end
$upscope $end
$scope module u_pc $end
$var wire 1 & clk $end
$var wire 32 b" next_pc [31:0] $end
$var wire 1 * reset $end
$var reg 32 c" current_pc [31:0] $end
$upscope $end
$scope module u_rf $end
$var wire 1 & clk $end
$var wire 5 d" rd [4:0] $end
$var wire 32 e" rd_wdata [31:0] $end
$var wire 1 4 reg_write $end
$var wire 1 * reset $end
$var wire 5 f" rs1 [4:0] $end
$var wire 5 g" rs2 [4:0] $end
$var wire 32 h" rs2_data [31:0] $end
$var wire 32 i" rs1_data [31:0] $end
$var integer 32 j" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin end_test $end
$upscope $end
$scope task run_cycles $end
$var integer 32 k" i [31:0] $end
$var integer 32 l" n [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 W"
b1011 V"
b1110011011100100110001100101111011001000110000101110100011000010101111101101101011001010110110100101110011011010110010101101101 S"
b1011 R"
b1 O"
b110 N"
b100 M"
b111 L"
b101 K"
b0 J"
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 B"
b1110011011100100110001100101111011001000110000101110100011000010101111101101101011001010110110100101110011011010110010101101101 A"
b100000 @"
b1011 ?"
b100000 x
b100000 q
b100000 n
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 I
b1110011011100100110001100101111011001000110000101110100011000010101111101101101011001010110110100101110011011010110010101101101 H
b100000 G
b1011 F
b10100 %
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 $
b1101111 #
b1011 "
$end
#0
$dumpvars
b101 l"
b0 k"
bx j"
b0 i"
bx h"
b10000 g"
b0 f"
b10000 e"
b110 d"
b0 c"
b100 b"
b10000 a"
b10000 `"
b10000 _"
b0 ^"
b100 ]"
b100 \"
b0 ["
1Z"
b10000 Y"
b1000000000000001100010011 X"
b0 U"
b0 T"
bx Q"
b100 P"
b0 I"
bx H"
b0 G"
b10000 F"
b10000 E"
b0 D"
b0 C"
b10000 >"
0="
x<"
b100 ;"
b0 :"
b1000000000000001100010011 9"
b0 8"
b10000 7"
b0 6"
b100 5"
b100 4"
b0 3"
b0 2"
bx 1"
b10000 0"
b0 /"
b10000 ."
b0 -"
b110 ,"
b10011 +"
b0 *"
b10000 )"
b0 ("
b0 '"
b0 &"
b10000 %"
b10000 $"
b0 #"
b10000 ""
b110 !"
b10000 ~
b1000000000000001100010011 }
b10000 |
b110 {
b1000000000000000000000000 z
b0 y
b1000000000000001100010011 w
b10011 v
b0 u
b0 t
b0 s
b0 r
b0 p
b1000000000000001100010011 o
b0 m
0l
b10000 k
b0 j
b1000000000000001100010011 i
1h
0g
0f
0e
0d
0c
0b
0a
b0 `
b110 _
b0 ^
b10000 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b10000 V
b0 U
b0 T
0S
b10000 R
b0 Q
b1000000000000001100010011 P
b0 O
b10011 N
b110 M
b0 L
b10000 K
b0 J
b0 E
1D
b10000 C
b10000 B
b0 A
b0 @
b0 ?
b10000 >
b1000000000000001100010011 =
0<
0;
0:
09
08
b0 7
b10011 6
b110 5
14
b0 3
b10000 2
b0 1
b1000000000000001100010011 0
b10000 /
bx .
b0 -
bx ,
r0 +
1*
0)
0(
0'
0&
b0 !
$end
#5000
1<"
b0 1"
b0 H"
b0 Q"
b0 h"
b100000 j"
b1 k"
1&
#10000
0&
#15000
b10 k"
b100000 j"
1&
#20000
0&
#25000
b100000 j"
b11 k"
1&
#30000
0&
#35000
b100 k"
b100000 j"
1&
#40000
0&
#45000
b0 ,
0*
b100000 j"
b101 k"
1&
#50000
0&
#55000
b11011110101011011100000000000000 0"
b11011110101011011100000000000000 e"
b0 ;"
b0 P"
b11011110101011011100000000000000 /
b11011110101011011100000000000000 B
b11011110101011011100000000000000 %"
b11011110101011011100000000000000 >"
b11011110101011011100000000000000 F"
b11011110101011011100000000000000 `"
b11011110101011011100000000000000 7"
b11011110101011011100000000000000 E"
b11011110101011011100000000000000 _"
b11011110101011011100000000000000 >
b11011110101011011100000000000000 R
b11011110101011011100000000000000 k
b11011110101011011100000000000000 ""
b11011110101011011100000000000000 )"
b11011110101011011100000000000000 Y"
b10 7
b10 O
b10 `
b10 t
b10 *"
b11 Q
b11 j
b11 s
b11 y
1D
0<"
b1000 5"
b1000 ]"
b1000 b"
b11111111111111011100010111101010 |
b11011110101011011100000000000000 z
b11111111111111111111110111100110 !"
b11111111111111111111110111100111 {
b11111111111111111111110111101010 ~
0h
1d
b110111 v
b100 p
b1010 ]
b11011 ^
b111 _
b110111101010 C
b110111101010 V
b110111101010 $"
b1101111 ?
b1101111 T
b1101111 ("
b1010 2
b1010 K
b1010 ."
b1010 g"
b11011 3
b11011 L
b11011 -"
b11011 f"
b100 @
b100 U
b100 Y
b100 '"
b100 G"
b111 5
b111 M
b111 ,"
b111 d"
b110111 6
b110111 N
b110111 +"
b11011110101011011100001110110111 0
b11011110101011011100001110110111 =
b11011110101011011100001110110111 P
b11011110101011011100001110110111 i
b11011110101011011100001110110111 o
b11011110101011011100001110110111 w
b11011110101011011100001110110111 }
b11011110101011011100001110110111 9"
b11011110101011011100001110110111 X"
b1 :"
b1 U"
b11011110101011011100000000000100 a"
b1000 \"
b1000 4"
b100 !
b100 A
b100 &"
b100 6"
b100 ^"
b100 c"
b1 ,
b1 -
1&
#60000
0&
#65000
14
b11011110101011011011111011101111 0"
b11011110101011011011111011101111 e"
b11110111011 ;"
b11110111011 P"
b11011110101011011011111011101111 /
b11011110101011011011111011101111 B
b11011110101011011011111011101111 %"
b11011110101011011011111011101111 >"
b11011110101011011011111011101111 F"
b11011110101011011100000000000000 8"
b11011110101011011100000000000000 D"
b11111111111111111111111011101111 7"
b11111111111111111111111011101111 E"
b11011110101011011011111011101110 `"
b11111111111111111111111011101111 >
b11111111111111111111111011101111 R
b11111111111111111111111011101111 k
b11111111111111111111111011101111 ""
b11111111111111111111111011101111 )"
b11111111111111111111111011101111 Y"
b0 7
b0 O
b0 `
b0 t
b0 *"
b0 Q
b0 j
b0 s
b0 y
1D
b11011110101011011011111011101111 _"
b11011110101011011100000000000000 2"
b11011110101011011100000000000000 I"
b11011110101011011100000000000000 ["
b11011110101011011100000000000000 i"
0<"
b1100 5"
b1100 ]"
b1100 b"
b11111111111100111000111011101110 |
b11101110111100111000000000000000 z
b11111111111111111111111011100110 !"
b11111111111111111111111011100111 {
b11111111111111111111111011101111 ~
1h
0d
b10011 v
b0 p
b1111 ]
b111 ^
b111011101111 C
b111011101111 V
b111011101111 $"
b1110111 ?
b1110111 T
b1110111 ("
b1111 2
b1111 K
b1111 ."
b1111 g"
b111 3
b111 L
b111 -"
b111 f"
b0 @
b0 U
b0 Y
b0 '"
b0 G"
b10011 6
b10011 N
b10011 +"
b11101110111100111000001110010011 0
b11101110111100111000001110010011 =
b11101110111100111000001110010011 P
b11101110111100111000001110010011 i
b11101110111100111000001110010011 o
b11101110111100111000001110010011 w
b11101110111100111000001110010011 }
b11101110111100111000001110010011 9"
b11101110111100111000001110010011 X"
b10 :"
b10 U"
b11111111111111111111111011110111 a"
b1100 \"
b1100 4"
b1000 !
b1000 A
b1000 &"
b1000 6"
b1000 ^"
b1000 c"
b10 ,
1)
b10 -
1&
#70000
0&
#75000
04
b1000000 7"
b1000000 E"
b1000000 0"
b1000000 e"
b10000 ;"
b10000 P"
b1000000 >
b1000000 R
b1000000 k
b1000000 ""
b1000000 )"
b1000000 Y"
18
b1 Q
b1 j
b1 s
b1 y
1D
b11011110101011011011111011101111 1"
b11011110101011011011111011101111 H"
b11011110101011011011111011101111 Q"
b11011110101011011011111011101111 h"
b1000000 /
b1000000 B
b1000000 %"
b1000000 >"
b1000000 F"
b10000 5"
b10000 ]"
b10000 b"
b10100001000110 |
b100011100000010000000000000 z
b1000000 !"
b1000000 {
b1000111 ~
0h
1c
b100011 v
b10 p
b111 ]
b0 ^
b0 _
b1000111 C
b1000111 V
b1000111 $"
b10 ?
b10 T
b10 ("
b111 2
b111 K
b111 ."
b111 g"
b0 3
b0 L
b0 -"
b0 f"
b10 @
b10 U
b10 Y
b10 '"
b10 G"
b0 5
b0 M
b0 ,"
b0 d"
b100011 6
b100011 N
b100011 +"
b1000000 `"
b0 8"
b0 D"
b100011100000010000000100011 0
b100011100000010000000100011 =
b100011100000010000000100011 P
b100011100000010000000100011 i
b100011100000010000000100011 o
b100011100000010000000100011 w
b100011100000010000000100011 }
b100011100000010000000100011 9"
b100011100000010000000100011 X"
b1000000 _"
b0 2"
b0 I"
b0 ["
b0 i"
b11 :"
b11 U"
b1001100 a"
b10000 \"
b10000 4"
b1100 !
b1100 A
b1100 &"
b1100 6"
b1100 ^"
b1100 c"
b11 ,
b11 -
1&
#80000
0&
#85000
b100 ;"
b100 P"
b10000 /
b10000 B
b10000 %"
b10000 >"
b10000 F"
b0 `"
14
b10000 8"
b10000 D"
b10100 0"
b10100 e"
b0 7"
b0 E"
1<"
b0 _"
b0 >
b0 R
b0 k
b0 ""
b0 )"
b0 Y"
b1 7
b1 O
b1 `
b1 t
b1 *"
1a
b10 1
b10 J
b10 \
b10 u
b10 /"
b100 Q
b100 j
b100 s
b100 y
1D
08
b0 1"
b0 H"
b0 Q"
b0 h"
b10000 5"
b10000 ]"
b10000 b"
b0 |
b0 z
b0 !"
b0 {
b0 ~
1;
0c
b1101111 v
b0 p
b0 ]
b0 C
b0 V
b0 $"
b0 ?
b0 T
b0 ("
b0 2
b0 K
b0 ."
b0 g"
b0 @
b0 U
b0 Y
b0 '"
b0 G"
b1101111 6
b1101111 N
b1101111 +"
b1101111 0
b1101111 =
b1101111 P
b1101111 i
b1101111 o
b1101111 w
b1101111 }
b1101111 9"
b1101111 X"
b100 :"
b100 U"
b10000 a"
b10100 \"
b10100 4"
b10000 !
b10000 A
b10000 &"
b10000 6"
b10000 ^"
b10000 c"
b100 ,
b100 -
1&
#90000
0&
#95000
b10001 .
1'
r0.8 +
1(
b101 -
1&
