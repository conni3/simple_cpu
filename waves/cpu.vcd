$date
	Wed Aug  6 09:54:55 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # PCsrc $end
$var wire 32 $ branch_pc [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 % rs2_data [31:0] $end
$var wire 32 & rs1_data [31:0] $end
$var wire 32 ' pc_plus4 [31:0] $end
$var wire 32 ( next_pc [31:0] $end
$var wire 32 ) mem_data [31:0] $end
$var wire 32 * imm_data [31:0] $end
$var wire 32 + current_pc [31:0] $end
$var wire 32 , current_instr [31:0] $end
$var wire 32 - branch_target [31:0] $end
$var wire 1 . RegWrite $end
$var wire 1 / MemtoReg $end
$var wire 1 0 MemWrite $end
$var wire 1 1 MemRead $end
$var wire 1 2 Jump $end
$var wire 3 3 ImmSrc [2:0] $end
$var wire 1 4 BranchTaken $end
$var wire 1 5 Branch $end
$var wire 1 6 ALUZero $end
$var wire 1 7 ALUSrc $end
$var wire 32 8 ALUResult [31:0] $end
$var wire 2 9 ALUOp [1:0] $end
$var wire 4 : ALUControl [3:0] $end
$var parameter 32 ; ADDR_W $end
$var parameter 32 < DATA_W $end
$var reg 3 = funct3 [2:0] $end
$var reg 7 > funct7 [6:0] $end
$var reg 7 ? opcode [6:0] $end
$var reg 5 @ rd [4:0] $end
$var reg 5 A rs1 [4:0] $end
$var reg 5 B rs2 [4:0] $end
$scope module alu_control_inst $end
$var wire 3 C funct3 [2:0] $end
$var wire 1 D funct7_5 $end
$var wire 2 E ALUOp [1:0] $end
$var reg 4 F ALUCtrl [3:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 4 G alu_control [3:0] $end
$var wire 32 H operand_b [31:0] $end
$var wire 1 6 zero $end
$var wire 32 I operand_a [31:0] $end
$var reg 32 J alu_result [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 K result [31:0] $end
$var wire 32 L b [31:0] $end
$var wire 32 M a [31:0] $end
$var parameter 32 N WIDTH $end
$upscope $end
$scope module branch_comp_inst $end
$var wire 3 O funct3 [2:0] $end
$var wire 32 P op2 [31:0] $end
$var wire 32 Q op1 [31:0] $end
$var parameter 3 R BEQ $end
$var parameter 3 S BGE $end
$var parameter 3 T BGEU $end
$var parameter 3 U BLT $end
$var parameter 3 V BLTU $end
$var parameter 3 W BNE $end
$var reg 1 4 branch $end
$upscope $end
$scope module control_inst $end
$var wire 3 X funct3 [2:0] $end
$var wire 7 Y opcode [6:0] $end
$var reg 2 Z ALUOp [1:0] $end
$var reg 1 7 ALUSrc $end
$var reg 1 5 Branch $end
$var reg 3 [ ImmSrc [2:0] $end
$var reg 1 2 Jump $end
$var reg 1 1 MemRead $end
$var reg 1 0 MemWrite $end
$var reg 1 / MemtoReg $end
$var reg 1 . RegWrite $end
$upscope $end
$scope module data_mem_inst $end
$var wire 11 \ addr [10:0] $end
$var wire 1 ! clk $end
$var wire 1 1 re $end
$var wire 1 0 we $end
$var wire 32 ] write_data [31:0] $end
$var reg 32 ^ read_data [31:0] $end
$upscope $end
$scope module imm_gen_inst $end
$var wire 3 _ imm_sel [2:0] $end
$var wire 32 ` u_imm [31:0] $end
$var wire 32 a s_imm [31:0] $end
$var wire 32 b j_imm [31:0] $end
$var wire 32 c instr [31:0] $end
$var wire 32 d i_imm [31:0] $end
$var wire 32 e b_imm [31:0] $end
$var reg 32 f imm_out [31:0] $end
$upscope $end
$scope module instr_mem_inst $end
$var wire 11 g addr [10:0] $end
$var reg 32 h instr [31:0] $end
$upscope $end
$scope module pc_inst $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 i next_pc [31:0] $end
$var reg 32 j current_pc [31:0] $end
$upscope $end
$scope module pc_mux_inst $end
$var wire 32 k a [31:0] $end
$var wire 1 # sel $end
$var wire 32 l y [31:0] $end
$var wire 32 m b [31:0] $end
$var parameter 32 n WIDTH $end
$upscope $end
$scope module pc_plus4_inst $end
$var wire 32 o a [31:0] $end
$var wire 32 p b [31:0] $end
$var wire 32 q result [31:0] $end
$var parameter 32 r WIDTH $end
$upscope $end
$scope module reg_file_inst $end
$var wire 1 ! clk $end
$var wire 5 s read_reg1 [4:0] $end
$var wire 5 t read_reg2 [4:0] $end
$var wire 1 . regwrite $end
$var wire 1 " reset $end
$var wire 32 u write_data [31:0] $end
$var wire 5 v write_reg [4:0] $end
$var wire 32 w read_data2 [31:0] $end
$var wire 32 x read_data1 [31:0] $end
$var integer 32 y i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 r
b100000 n
b1 W
b110 V
b100 U
b111 T
b101 S
b0 R
b100000 N
b100000 <
b1011 ;
$end
#0
$dumpvars
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx q
b100 p
bx o
bx m
bx l
bz k
bx j
bx i
bx h
bx g
b0 f
bx0 e
bx d
bx c
bx0 b
bx a
bx000000000000 `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx Q
bx P
bx O
bx M
b0 L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
xD
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx :
bx 9
bx 8
x7
x6
x5
x4
bx 3
x2
x1
x0
x/
x.
bx -
bx ,
bx +
b0 *
bx )
bx (
bx '
bx &
bx %
bz $
x#
1"
0!
$end
#5000
b100 '
b100 m
b100 q
b0 -
b0 K
b0 +
b0 M
b0 j
b0 o
b100000 y
1!
#10000
0!
#12000
0"
#15000
bx '
bx m
bx q
bx -
bx K
bx +
bx M
bx j
bx o
1!
#20000
0!
#25000
1!
#30000
0!
#35000
1!
#40000
0!
#45000
1!
#50000
0!
#55000
1!
#60000
0!
#65000
1!
#70000
0!
#75000
1!
#80000
0!
#85000
1!
#90000
0!
#95000
1!
#100000
0!
#105000
1!
#110000
0!
#115000
1!
#120000
0!
#125000
1!
#130000
0!
#135000
1!
#140000
0!
#145000
1!
#150000
0!
#155000
1!
#160000
0!
#165000
1!
#170000
0!
#175000
1!
#180000
0!
#185000
1!
#190000
0!
#195000
1!
#200000
0!
