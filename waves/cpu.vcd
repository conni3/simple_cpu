$date
	Mon Aug 25 19:33:06 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 32 ! debug_pc [31:0] $end
$var parameter 32 " ADDR_WIDTH $end
$var parameter 32 # END_SENTINEL $end
$var parameter 128 $ IMEM_FILE $end
$var parameter 32 % MAX_CYCLES $end
$var reg 1 & clk $end
$var reg 1 ' finished $end
$var reg 1 ( mem_ok $end
$var reg 1 ) reg_ok $end
$var reg 1 * reset $end
$var integer 32 + cycles [31:0] $end
$var integer 32 , k [31:0] $end
$scope module dut $end
$var wire 1 & clk $end
$var wire 1 * reset $end
$var wire 2 - wb_sel [1:0] $end
$var wire 5 . rs2 [4:0] $end
$var wire 5 / rs1 [4:0] $end
$var wire 1 0 reg_write $end
$var wire 5 1 rd [4:0] $end
$var wire 7 2 opcode [6:0] $end
$var wire 2 3 op1_sel [1:0] $end
$var wire 1 4 mem_write $end
$var wire 1 5 mem_read $end
$var wire 1 6 is_jalr $end
$var wire 1 7 is_jal $end
$var wire 1 8 is_branch $end
$var wire 32 9 instr [31:0] $end
$var wire 32 : imm_out [31:0] $end
$var wire 7 ; funct7 [6:0] $end
$var wire 3 < funct3 [2:0] $end
$var wire 32 = debug_pc [31:0] $end
$var wire 20 > csr [19:0] $end
$var wire 1 ? alu_src $end
$var wire 4 @ alu_ctrl [3:0] $end
$var parameter 32 A ADDR_WIDTH $end
$var parameter 32 B DATA_WIDTH $end
$var parameter 128 C DMEM_FILE $end
$var parameter 128 D IMEM_FILE $end
$scope module u_controller $end
$var wire 2 E wb_sel [1:0] $end
$var wire 5 F rs2 [4:0] $end
$var wire 5 G rs1 [4:0] $end
$var wire 1 0 reg_write $end
$var wire 5 H rd [4:0] $end
$var wire 7 I opcode [6:0] $end
$var wire 2 J op1_sel [1:0] $end
$var wire 1 4 mem_write $end
$var wire 1 5 mem_read $end
$var wire 1 6 is_jalr $end
$var wire 1 7 is_jal $end
$var wire 1 8 is_branch $end
$var wire 32 K instr [31:0] $end
$var wire 3 L imm_sel [2:0] $end
$var wire 32 M imm_out [31:0] $end
$var wire 1 N funct7_5 $end
$var wire 7 O funct7 [6:0] $end
$var wire 3 P funct3 [2:0] $end
$var wire 20 Q csr [19:0] $end
$var wire 1 ? alu_src $end
$var wire 2 R alu_op [1:0] $end
$var wire 4 S alu_ctrl [3:0] $end
$scope module u_alu_control $end
$var wire 3 T funct3 [2:0] $end
$var wire 1 N funct7_5 $end
$var wire 2 U alu_op [1:0] $end
$var reg 4 V alu_ctrl [3:0] $end
$upscope $end
$scope module u_decoder_glue $end
$var wire 2 W wb_sel [1:0] $end
$var wire 5 X rs2 [4:0] $end
$var wire 5 Y rs1 [4:0] $end
$var wire 1 0 reg_write $end
$var wire 5 Z rd [4:0] $end
$var wire 2 [ op1_sel [1:0] $end
$var wire 1 4 mem_write $end
$var wire 1 5 mem_read $end
$var wire 1 \ jump $end
$var wire 1 ] is_system $end
$var wire 1 ^ is_store $end
$var wire 1 _ is_lui $end
$var wire 1 ` is_load $end
$var wire 1 6 is_jalr $end
$var wire 1 7 is_jal $end
$var wire 1 8 is_branch $end
$var wire 1 a is_auipc $end
$var wire 1 b is_alu_reg $end
$var wire 1 c is_alu_imm $end
$var wire 32 d instr [31:0] $end
$var wire 3 e imm_sel [2:0] $end
$var wire 32 f imm_out [31:0] $end
$var wire 1 g branch_sig $end
$var wire 1 ? alu_src $end
$var wire 2 h alu_op [1:0] $end
$var parameter 32 i DATA_WIDTH $end
$scope module u_ctl $end
$var wire 1 ] is_system $end
$var wire 1 ^ is_store $end
$var wire 1 _ is_lui $end
$var wire 1 ` is_load $end
$var wire 1 6 is_jalr $end
$var wire 1 7 is_jal $end
$var wire 1 8 is_branch $end
$var wire 1 a is_auipc $end
$var wire 1 b is_alu_reg $end
$var wire 1 c is_alu_imm $end
$var wire 32 j instr [31:0] $end
$var wire 3 k funct3 [2:0] $end
$var parameter 32 l DATA_WIDTH $end
$var reg 2 m alu_op [1:0] $end
$var reg 1 ? alu_src $end
$var reg 1 g branch_sig $end
$var reg 3 n imm_sel [2:0] $end
$var reg 1 \ jump $end
$var reg 1 5 mem_read $end
$var reg 1 4 mem_write $end
$var reg 2 o op1_sel [1:0] $end
$var reg 2 p wb_sel [1:0] $end
$upscope $end
$scope module u_dec $end
$var wire 1 6 is_jalr $end
$var wire 1 0 reg_write $end
$var wire 7 q opcode [6:0] $end
$var wire 1 ] is_system $end
$var wire 1 ^ is_store $end
$var wire 1 _ is_lui $end
$var wire 1 ` is_load $end
$var wire 1 7 is_jal $end
$var wire 1 8 is_branch $end
$var wire 1 a is_auipc $end
$var wire 1 b is_alu_reg $end
$var wire 1 c is_alu_imm $end
$var wire 32 r instr [31:0] $end
$var parameter 32 s DATA_WIDTH $end
$upscope $end
$scope module u_imm $end
$var wire 3 t imm_sel [2:0] $end
$var wire 32 u u_imm [31:0] $end
$var wire 32 v s_imm [31:0] $end
$var wire 32 w j_imm [31:0] $end
$var wire 32 x instr [31:0] $end
$var wire 32 y i_imm [31:0] $end
$var wire 32 z b_imm [31:0] $end
$var reg 32 { imm_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module u_datapath $end
$var wire 4 | alu_ctrl [3:0] $end
$var wire 1 ? alu_src $end
$var wire 1 & clk $end
$var wire 20 } csr [19:0] $end
$var wire 32 ~ debug_pc [31:0] $end
$var wire 3 !" funct3 [2:0] $end
$var wire 7 "" funct7 [6:0] $end
$var wire 32 #" imm_out [31:0] $end
$var wire 1 8 is_branch $end
$var wire 1 7 is_jal $end
$var wire 1 6 is_jalr $end
$var wire 1 5 mem_read $end
$var wire 1 4 mem_write $end
$var wire 2 $" op1_sel [1:0] $end
$var wire 7 %" opcode [6:0] $end
$var wire 5 &" rd [4:0] $end
$var wire 1 0 reg_write $end
$var wire 1 * reset $end
$var wire 5 '" rs1 [4:0] $end
$var wire 5 (" rs2 [4:0] $end
$var wire 2 )" wb_sel [1:0] $end
$var wire 32 *" wb_data [31:0] $end
$var wire 32 +" rs2_data [31:0] $end
$var wire 32 ," rs1_data [31:0] $end
$var wire 32 -" rdata [31:0] $end
$var wire 32 ." pc_plus4 [31:0] $end
$var wire 32 /" pc_next [31:0] $end
$var wire 32 0" pc_current [31:0] $end
$var wire 32 1" op_b [31:0] $end
$var wire 32 2" op_a [31:0] $end
$var wire 32 3" instr [31:0] $end
$var wire 11 4" imem_addr [10:0] $end
$var wire 11 5" dmem_addr [10:0] $end
$var wire 1 6" branch_taken $end
$var wire 1 7" alu_zero $end
$var wire 32 8" alu_result [31:0] $end
$var parameter 32 9" ADDR_WIDTH $end
$var parameter 32 :" DATA_WIDTH $end
$var parameter 128 ;" DMEM_FILE $end
$var parameter 128 <" IMEM_FILE $end
$scope module u_alu $end
$var wire 4 =" alu_ctrl [3:0] $end
$var wire 32 >" op_a [31:0] $end
$var wire 32 ?" op_b [31:0] $end
$var wire 1 7" alu_zero $end
$var reg 32 @" alu_result [31:0] $end
$upscope $end
$scope module u_branch_comp $end
$var wire 3 A" funct3 [2:0] $end
$var wire 32 B" op2 [31:0] $end
$var wire 32 C" op1 [31:0] $end
$var parameter 3 D" BEQ $end
$var parameter 3 E" BGE $end
$var parameter 3 F" BGEU $end
$var parameter 3 G" BLT $end
$var parameter 3 H" BLTU $end
$var parameter 3 I" BNE $end
$var reg 1 6" branch_taken $end
$upscope $end
$scope module u_dmem $end
$var wire 11 J" addr [10:0] $end
$var wire 1 & clk $end
$var wire 1 5 mem_read $end
$var wire 1 4 mem_write $end
$var wire 32 K" wdata [31:0] $end
$var parameter 32 L" ADDR_WIDTH $end
$var parameter 128 M" MEM_FILE $end
$var reg 32 N" rdata [31:0] $end
$upscope $end
$scope module u_imem $end
$var wire 11 O" addr [10:0] $end
$var parameter 32 P" ADDR_WIDTH $end
$var parameter 128 Q" MEM_FILE $end
$var reg 32 R" instr [31:0] $end
$upscope $end
$scope module u_next_pc $end
$var wire 1 6" branch_taken $end
$var wire 32 S" imm_out [31:0] $end
$var wire 1 8 is_branch $end
$var wire 1 7 is_jal $end
$var wire 1 6 is_jalr $end
$var wire 1 T" misalign_bits $end
$var wire 32 U" rs1_data [31:0] $end
$var wire 32 V" pc_plus4 [31:0] $end
$var wire 32 W" pc_next [31:0] $end
$var wire 32 X" pc_current [31:0] $end
$var wire 32 Y" jalr_raw [31:0] $end
$var wire 32 Z" jalr_aligned [31:0] $end
$var wire 32 [" branch_jal_pc [31:0] $end
$upscope $end
$scope module u_pc $end
$var wire 1 & clk $end
$var wire 32 \" next_pc [31:0] $end
$var wire 1 * reset $end
$var reg 32 ]" current_pc [31:0] $end
$upscope $end
$scope module u_rf $end
$var wire 1 & clk $end
$var wire 5 ^" rd [4:0] $end
$var wire 32 _" rd_wdata [31:0] $end
$var wire 1 0 reg_write $end
$var wire 1 * reset $end
$var wire 5 `" rs1 [4:0] $end
$var wire 5 a" rs2 [4:0] $end
$var wire 32 b" rs2_data [31:0] $end
$var wire 32 c" rs1_data [31:0] $end
$var integer 32 d" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin end_test $end
$upscope $end
$scope task run_cycles $end
$var integer 32 e" i [31:0] $end
$var integer 32 f" n [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 Q"
b1011 P"
b1110011011100100110001100101111011001000110000101110100011000010101111101101101011001010110110100101110011011010110010101101101 M"
b1011 L"
b1 I"
b110 H"
b100 G"
b111 F"
b101 E"
b0 D"
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 <"
b1110011011100100110001100101111011001000110000101110100011000010101111101101101011001010110110100101110011011010110010101101101 ;"
b100000 :"
b1011 9"
b100000 s
b100000 l
b100000 i
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 D
b1110011011100100110001100101111011001000110000101110100011000010101111101101101011001010110110100101110011011010110010101101101 C
b100000 B
b1011 A
b10100 %
b101110001011110111010001100101011100110111010001110011001011110111000001110010011011110110011100101110011011010110010101101101 $
b1101111 #
b1011 "
$end
#0
$dumpvars
b101 f"
b0 e"
bx d"
b0 c"
bx b"
b10000 a"
b0 `"
b10000 _"
b110 ^"
b0 ]"
b100 \"
b10000 ["
b10000 Z"
b10000 Y"
b0 X"
b100 W"
b100 V"
b0 U"
1T"
b10000 S"
b1000000000000001100010011 R"
b0 O"
b0 N"
bx K"
b100 J"
b0 C"
bx B"
b0 A"
b10000 @"
b10000 ?"
b0 >"
b0 ="
b10000 8"
07"
x6"
b100 5"
b0 4"
b1000000000000001100010011 3"
b0 2"
b10000 1"
b0 0"
b100 /"
b100 ."
b0 -"
b0 ,"
bx +"
b10000 *"
b0 )"
b10000 ("
b0 '"
b110 &"
b10011 %"
b0 $"
b10000 #"
b0 ""
b0 !"
b0 ~
b10000 }
b0 |
b10000 {
b110 z
b10000 y
b1000000000000001100010011 x
b10000 w
b110 v
b1000000000000000000000000 u
b0 t
b1000000000000001100010011 r
b10011 q
b0 p
b0 o
b0 n
b0 m
b0 k
b1000000000000001100010011 j
b0 h
0g
b10000 f
b0 e
b1000000000000001100010011 d
1c
0b
0a
0`
0_
0^
0]
0\
b0 [
b110 Z
b0 Y
b10000 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b10000 Q
b0 P
b0 O
0N
b10000 M
b0 L
b1000000000000001100010011 K
b0 J
b10011 I
b110 H
b0 G
b10000 F
b0 E
b0 @
1?
b10000 >
b0 =
b0 <
b0 ;
b10000 :
b1000000000000001100010011 9
08
07
06
05
04
b0 3
b10011 2
b110 1
10
b0 /
b10000 .
b0 -
bx ,
bx +
1*
0)
0(
0'
0&
b0 !
$end
#5000
16"
b0 +"
b0 B"
b0 K"
b0 b"
b100000 d"
b1 e"
1&
#10000
0&
#15000
b10 e"
b100000 d"
1&
#20000
0&
#25000
b100000 d"
b11 e"
1&
#30000
0&
#35000
b100 e"
b100000 d"
1&
#40000
0&
#45000
b0 +
0*
b100000 d"
b101 e"
1&
#50000
0&
#55000
b11011110101011011100000000000000 *"
b11011110101011011100000000000000 _"
b0 5"
b0 J"
b11011110101011011100000000000000 8"
b11011110101011011100000000000000 @"
b11011110101011011100000000000000 Z"
b11011110101011011100000000000000 1"
b11011110101011011100000000000000 ?"
b11011110101011011100000000000000 Y"
b11011110101011011100000000000000 :
b11011110101011011100000000000000 M
b11011110101011011100000000000000 f
b11011110101011011100000000000000 {
b11011110101011011100000000000000 #"
b11011110101011011100000000000000 S"
b10 3
b10 J
b10 [
b10 o
b10 $"
b11 L
b11 e
b11 n
b11 t
1?
06"
b1000 /"
b1000 W"
b1000 \"
b11111111111111011100010111101010 w
b11011110101011011100000000000000 u
b11111111111111111111110111100110 z
b11111111111111111111110111100111 v
b11111111111111111111110111101010 y
0c
1_
b110111 q
b100 k
b1010 X
b11011 Y
b111 Z
b110111101010 >
b110111101010 Q
b110111101010 }
b1101111 ;
b1101111 O
b1101111 ""
b1010 .
b1010 F
b1010 ("
b1010 a"
b11011 /
b11011 G
b11011 '"
b11011 `"
b100 <
b100 P
b100 T
b100 !"
b100 A"
b111 1
b111 H
b111 &"
b111 ^"
b110111 2
b110111 I
b110111 %"
b11011110101011011100001110110111 9
b11011110101011011100001110110111 K
b11011110101011011100001110110111 d
b11011110101011011100001110110111 j
b11011110101011011100001110110111 r
b11011110101011011100001110110111 x
b11011110101011011100001110110111 3"
b11011110101011011100001110110111 R"
b1 4"
b1 O"
b11011110101011011100000000000100 ["
b1000 V"
b1000 ."
b100 !
b100 =
b100 ~
b100 0"
b100 X"
b100 ]"
b1 +
1&
#60000
0&
#65000
10
b11011110101011011011111011101111 *"
b11011110101011011011111011101111 _"
b11110111011 5"
b11110111011 J"
b11011110101011011011111011101111 8"
b11011110101011011011111011101111 @"
b11011110101011011100000000000000 2"
b11011110101011011100000000000000 >"
b11111111111111111111111011101111 1"
b11111111111111111111111011101111 ?"
b11011110101011011011111011101110 Z"
b11111111111111111111111011101111 :
b11111111111111111111111011101111 M
b11111111111111111111111011101111 f
b11111111111111111111111011101111 {
b11111111111111111111111011101111 #"
b11111111111111111111111011101111 S"
b0 3
b0 J
b0 [
b0 o
b0 $"
b0 L
b0 e
b0 n
b0 t
1?
b11011110101011011011111011101111 Y"
b11011110101011011100000000000000 ,"
b11011110101011011100000000000000 C"
b11011110101011011100000000000000 U"
b11011110101011011100000000000000 c"
06"
b1100 /"
b1100 W"
b1100 \"
b11111111111100111000111011101110 w
b11101110111100111000000000000000 u
b11111111111111111111111011100110 z
b11111111111111111111111011100111 v
b11111111111111111111111011101111 y
1c
0_
b10011 q
b0 k
b1111 X
b111 Y
b111011101111 >
b111011101111 Q
b111011101111 }
b1110111 ;
b1110111 O
b1110111 ""
b1111 .
b1111 F
b1111 ("
b1111 a"
b111 /
b111 G
b111 '"
b111 `"
b0 <
b0 P
b0 T
b0 !"
b0 A"
b10011 2
b10011 I
b10011 %"
b11101110111100111000001110010011 9
b11101110111100111000001110010011 K
b11101110111100111000001110010011 d
b11101110111100111000001110010011 j
b11101110111100111000001110010011 r
b11101110111100111000001110010011 x
b11101110111100111000001110010011 3"
b11101110111100111000001110010011 R"
b10 4"
b10 O"
b11111111111111111111111011110111 ["
b1100 V"
b1100 ."
b1000 !
b1000 =
b1000 ~
b1000 0"
b1000 X"
b1000 ]"
b10 +
1)
1&
#70000
0&
#75000
00
b1000000 1"
b1000000 ?"
b1000000 *"
b1000000 _"
b10000 5"
b10000 J"
b1000000 :
b1000000 M
b1000000 f
b1000000 {
b1000000 #"
b1000000 S"
14
b1 L
b1 e
b1 n
b1 t
1?
b11011110101011011011111011101111 +"
b11011110101011011011111011101111 B"
b11011110101011011011111011101111 K"
b11011110101011011011111011101111 b"
b1000000 8"
b1000000 @"
b10000 /"
b10000 W"
b10000 \"
b10100001000110 w
b100011100000010000000000000 u
b1000000 z
b1000000 v
b1000111 y
0c
1^
b100011 q
b10 k
b111 X
b0 Y
b0 Z
b1000111 >
b1000111 Q
b1000111 }
b10 ;
b10 O
b10 ""
b111 .
b111 F
b111 ("
b111 a"
b0 /
b0 G
b0 '"
b0 `"
b10 <
b10 P
b10 T
b10 !"
b10 A"
b0 1
b0 H
b0 &"
b0 ^"
b100011 2
b100011 I
b100011 %"
b1000000 Z"
b0 2"
b0 >"
b100011100000010000000100011 9
b100011100000010000000100011 K
b100011100000010000000100011 d
b100011100000010000000100011 j
b100011100000010000000100011 r
b100011100000010000000100011 x
b100011100000010000000100011 3"
b100011100000010000000100011 R"
b1000000 Y"
b0 ,"
b0 C"
b0 U"
b0 c"
b11 4"
b11 O"
b1001100 ["
b10000 V"
b10000 ."
b1100 !
b1100 =
b1100 ~
b1100 0"
b1100 X"
b1100 ]"
b11 +
1&
#80000
0&
#85000
b100 5"
b100 J"
b10000 8"
b10000 @"
b0 Z"
10
b10000 2"
b10000 >"
b10100 *"
b10100 _"
b0 1"
b0 ?"
16"
b0 Y"
b0 :
b0 M
b0 f
b0 {
b0 #"
b0 S"
b1 3
b1 J
b1 [
b1 o
b1 $"
1\
b10 -
b10 E
b10 W
b10 p
b10 )"
b100 L
b100 e
b100 n
b100 t
1?
04
b0 +"
b0 B"
b0 K"
b0 b"
b10000 /"
b10000 W"
b10000 \"
b0 w
b0 u
b0 z
b0 v
b0 y
17
0^
b1101111 q
b0 k
b0 X
b0 >
b0 Q
b0 }
b0 ;
b0 O
b0 ""
b0 .
b0 F
b0 ("
b0 a"
b0 <
b0 P
b0 T
b0 !"
b0 A"
b1101111 2
b1101111 I
b1101111 %"
b1101111 9
b1101111 K
b1101111 d
b1101111 j
b1101111 r
b1101111 x
b1101111 3"
b1101111 R"
b100 4"
b100 O"
b10000 ["
b10100 V"
b10100 ."
b10000 !
b10000 =
b10000 ~
b10000 0"
b10000 X"
b10000 ]"
b100 +
1&
#90000
0&
#95000
b10001 ,
1'
1(
1&
