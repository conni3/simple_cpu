$date
	Tue Aug 26 15:19:28 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 1 ! zero $end
$var wire 32 " alu_result [31:0] $end
$var reg 4 # alu_control [3:0] $end
$var reg 32 $ operand_a [31:0] $end
$var reg 32 % operand_b [31:0] $end
$var integer 32 & fail_count [31:0] $end
$var integer 32 ' pass_count [31:0] $end
$scope module uut $end
$var wire 4 ( alu_ctrl [3:0] $end
$var wire 32 ) op_a [31:0] $end
$var wire 32 * op_b [31:0] $end
$var wire 1 ! alu_zero $end
$var reg 32 + alu_result [31:0] $end
$upscope $end
$scope task do_test $end
$var reg 32 , a [31:0] $end
$var reg 32 - b [31:0] $end
$var reg 4 . ctrl [3:0] $end
$var reg 32 / expected [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b11001 /
b0 .
b1010 -
b1111 ,
b11001 +
b1010 *
b1111 )
b0 (
b0 '
b0 &
b1010 %
b1111 $
b0 #
b11001 "
0!
$end
#10000
b101 "
b101 +
b1 #
b1 (
b101 /
b1 .
b1 '
#20000
b10000 "
b10000 +
b10 #
b10 (
b100 %
b100 *
b1 $
b1 )
b10000 /
b10 .
b100 -
b1 ,
b10 '
#30000
b1 "
b1 +
b11 #
b11 (
b1 %
b1 *
b11111111111111111111111111111111 $
b11111111111111111111111111111111 )
b1 /
b11 .
b1 -
b11111111111111111111111111111111 ,
b11 '
#40000
b100 #
b100 (
b10 %
b10 *
b1 $
b1 )
b100 .
b10 -
b1 ,
b100 '
#50000
b11111111111111111111111111111111 "
b11111111111111111111111111111111 +
b101 #
b101 (
b1111000011110000111100001111 %
b1111000011110000111100001111 *
b11110000111100001111000011110000 $
b11110000111100001111000011110000 )
b11111111111111111111111111111111 /
b101 .
b1111000011110000111100001111 -
b11110000111100001111000011110000 ,
b101 '
#60000
b1 "
b1 +
b110 #
b110 (
b11111 %
b11111 *
b10000000000000000000000000000000 $
b10000000000000000000000000000000 )
b1 /
b110 .
b11111 -
b10000000000000000000000000000000 ,
b110 '
#70000
b11111111111111111111111111111111 "
b11111111111111111111111111111111 +
b111 #
b111 (
b11111111111111111111111111111111 /
b111 .
b111 '
#80000
b10010111011101010101011101111001 "
b10010111011101010101011101111001 +
b1000 #
b1000 (
b10000111011001010100001100100001 %
b10000111011001010100001100100001 *
b10010001101000101011001111000 $
b10010001101000101011001111000 )
b10010111011101010101011101111001 /
b1000 .
b10000111011001010100001100100001 -
b10010001101000101011001111000 ,
b1000 '
#90000
b111111110000000000000000 "
b111111110000000000000000 +
b1001 #
b1001 (
b111111111111111100000000 %
b111111111111111100000000 *
b11111111111111110000000000000000 $
b11111111111111110000000000000000 )
b111111110000000000000000 /
b1001 .
b111111111111111100000000 -
b11111111111111110000000000000000 ,
b1001 '
#100000
1!
b0 "
b0 +
b1 #
b1 (
b101 %
b101 *
b101 $
b101 )
b1010 '
#110000
b1011 '
